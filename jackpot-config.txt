// .env.example
# Настройки приложения
NODE_ENV=development
PORT=3000

# Настройки MongoDB
MONGODB_URI=mongodb://localhost:27017/stars_jackpot

# Секретные ключи
JWT_SECRET=your-secret-key-here
TELEGRAM_BOT_TOKEN=your-telegram-bot-token
TELEGRAM_PAYMENT_TOKEN=your-telegram-payment-token

# Telegram ID администраторов (через запятую)
ADMIN_TELEGRAM_IDS=123456789,987654321

# Настройки Chainlink VRF (если используется)
CHAINLINK_COORDINATOR=
CHAINLINK_SUBSCRIPTION_ID=
CHAINLINK_KEY_HASH=

# Настройки логирования
LOG_LEVEL=info
LOG_FORMAT=json

# Настройки CORS
CORS_ORIGIN=*

// package.json
{
  "name": "stars-jackpot-backend",
  "version": "1.0.0",
  "description": "Backend для лотереи Stars Jackpot в Telegram",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest"
  },
  "dependencies": {
    "axios": "^1.3.4",
    "bcrypt": "^5.1.0",
    "body-parser": "^1.20.2",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "mongoose": "^7.0.3",
    "node-schedule": "^2.1.1",
    "telegraf": "^4.12.2"
  },
  "devDependencies": {
    "jest": "^29.5.0",
    "nodemon": "^2.0.22",
    "supertest": "^6.3.3"
  },
  "engines": {
    "node": ">=16.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yourusername/stars-jackpot-backend.git"
  },
  "author": "Your Name",
  "license": "MIT"
}

// Dockerfile
FROM node:16-alpine

WORKDIR /usr/src/app

COPY package*.json ./

RUN npm ci --only=production

COPY . .

EXPOSE 3000

CMD [ "node", "server.js" ]

// docker-compose.yml
version: '3'

services:
  app:
    build: .
    ports:
      - "3000:3000"
    depends_on:
      - mongo
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongo:27017/stars_jackpot
      - JWT_SECRET=${JWT_SECRET}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_PAYMENT_TOKEN=${TELEGRAM_PAYMENT_TOKEN}
      - ADMIN_TELEGRAM_IDS=${ADMIN_TELEGRAM_IDS}
    volumes:
      - ./logs:/usr/src/app/logs
    restart: always

  mongo:
    image: mongo:5
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    restart: always

volumes:
  mongo-data:

// README.md
# Stars Jackpot Backend

Backend для лотереи Stars Jackpot в Telegram Mini App.

## Требования

- Node.js 16+
- MongoDB 5+
- Telegram Bot Token

## Установка и запуск

### Локальная разработка

1. Клонируйте репозиторий:
   ```
   git clone https://github.com/yourusername/stars-jackpot-backend.git
   cd stars-jackpot-backend
   ```

2. Установите зависимости:
   ```
   npm install
   ```

3. Создайте файл `.env` на основе `.env.example` и заполните его своими значениями.

4. Запустите сервер в режиме разработки:
   ```
   npm run dev
   ```

### Запуск с помощью Docker

1. Клонируйте репозиторий:
   ```
   git clone https://github.com/yourusername/stars-jackpot-backend.git
   cd stars-jackpot-backend
   ```

2. Создайте файл `.env` на основе `.env.example` и заполните его своими значениями.

3. Запустите с помощью Docker Compose:
   ```
   docker-compose up -d
   ```

## API Endpoints

### Авторизация

- `POST /api/auth/telegram` - Авторизация через Telegram
- `GET /api/auth/verify` - Проверка JWT токена

### Раунды

- `GET /api/rounds/current` - Получение информации о текущем раунде
- `GET /api/rounds/history` - Получение истории раундов
- `POST /api/rounds/bet` - Сделать ставку в текущем раунде

### Пользователи

- `GET /api/users/profile` - Получение профиля пользователя
- `PUT /api/users/settings` - Обновление настроек пользователя
- `GET /api/users/referral-link` - Получение реферальной ссылки
- `POST /api/users/use-referral` - Использование реферальной ссылки

### Задания

- `GET /api/tasks` - Получение списка доступных заданий
- `POST /api/tasks/verify/:taskId` - Проверка выполнения задания

### Платежи

- `POST /api/payments/buy` - Инициирование покупки Stars
- `POST /api/payments/verify` - Подтверждение платежа

### Администрирование

- `GET /api/admin/stats` - Получение статистики приложения
- `POST /api/admin/tasks` - Создание нового задания
- `PUT /api/admin/round/settings` - Изменение настроек текущего раунда
- `POST /api/admin/user/balance` - Управление балансом пользователя
- `POST /api/admin/jackpot/create` - Создание еженедельного джекпота

## Структура проекта

```
├── models/          # Mongoose модели
├── routes/          # API маршруты
├── middleware/      # Middleware функции
├── services/        # Сервисы для бизнес-логики
├── utils/           # Вспомогательные функции
├── server.js        # Точка входа приложения
├── .env.example     # Пример файла окружения
├── package.json     # Зависимости проекта
├── Dockerfile       # Конфигурация Docker
└── README.md        # Документация
```

## Лицензия

MIT
